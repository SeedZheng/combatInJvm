逻辑： 多个线程调用lock（）方法， 如果当前state为0， 说明无锁， 那么只有一个线程会CAS获得锁， 
并设置此线程为独占锁线程。其它线程会调用acquire方法来竞争锁（后续会全部加入同步队列中自旋或挂起）。
当有其它线程A又进来lock时， 恰好此前的某一线程恰好释放锁， 那么A恰好在同步队列所有等待获取锁的线程之前抢先获取锁。
也就是说所有已经在同步队列中的尚未被取消获取的线程是绝对保证串行获取锁。后面代码解释。


lock方法对比非公平锁， 没有了if else  也就意味着新来的线程没有插队的机会， 所有来的线程必须扔到队列尾部， 
acquire方法会像非公平锁一样首先调用tryAcquire插队试试（如果队列为空或着本身就是head，那么可能成功， 队列非空那么肯定被扔到队列尾部去了, 插个毛线）。


1.对象在什么情况下会进入老年代？
 GC晋升，默认是15次新生代GC
 survivor区超过一定使用率后，该区域内最小的age会成为晋升年龄
 新生代空间不足后，会晋升到老年代
 大对象会直接进入老年代(当eden空间无法放入该对象时)
	1）当对象大小大于Eden总空间时，直接进入老年代
	2）当对象大小小鱼Eden总空间而大于Eden剩余空间时，触发一次YGC，YGC后如果能放入则放入，仍无法放入的话进入老年代
2.eden和survivor空间大小自动变化
  1.7的并行收集器的-XX:+UseAdaptiveSizePolicy开启后(默认开启) 后会自动调整Eden和survivor的空间大小(serial收集器不会)
3.TLAB占用的是Eden的空间，在TLAB启用的情况下，虚拟机会为每一个线程分配一块TLAB空间，避免堆内存分配抢占
4.并不是所有的对象都分配在堆上，当确定一个对象不会逃逸出方法之外时(即逃逸分析)，
  那么该对象会被直接分配在栈上，随着方法的销毁而被回收，减少GC压力
5.永久区是存放类元数据的区域，存放太多的类，会导致溢出(是类，比如动态生成类，而不是实例对象	)
6.常量池在1.6及以前是放在永久区中，1.7及以后被移到了堆中
7.浅堆指的是对象所消耗的内存，和他所引用对象的大小无关，以String为例，他的浅堆大小总为24字节，和实际内容无关
8.深堆是指该对象能直接或者间接访问到的所以对象的浅堆大小，如char[]数组中每个元素的浅堆大小 
  就是该char[]数组的深堆大小(不包括char[]数组本身的浅堆的大小)
9.对象实际大小指的是包括对象本身和他能接触到的所有对象的浅堆大小
10.对象头
	32位系统：
	hash 25位                         ,age 4位                  ,0(biased_lock是否偏向锁) 1位  ,01(lock锁信息,无锁) 2位 共32位
11.偏向锁
	32位系统：
	JavaThread*(持有偏向锁的线程) 23位,epoch(偏向锁的时间戳) 2位,age(对象年龄) 4位,固定位置 1位,01(偏向锁) 2位 共32位
12.轻量级锁
	32位系统：
	ptr(指向存放在获得锁的线程栈中改对象的真实对象头) 30位       							   ,00(轻量级锁)   2位 共32位
13.重量级锁
	32位系统：
	ptr(指向monitor对象的指针) 30位       							                           ,10(重量级锁)   2位 共32位
14.偏向锁：如果不存在锁竞争，则取消之前已经取得锁的线程同步操作，当该线程再次请求这个锁时，无需再进行同步操作，
   如果此时有其他锁进入，则偏向锁取消，JVM中使用 -XX:+UseBiasedLocking 启用偏向锁
15.锁的一般过程
	偏向锁--如果有锁竞争-->轻量级锁--BasicLock地址复制到MarkWord失败(加锁失败)-->尝试自旋锁-
	-自旋若干次仍未获得锁(锁竞争很激烈的情况下会发生)-->重量级锁
16.使用new关键字实例化对象时，会实例化他自己和他的父类
17.在引用一个字段时，只有该字段所属的类会被初始化
18.使用子类引用父类的一个字段时，子类只会被加载，不会被初始化，父类会被初始化
19.引用final字段时，该字段所属的类不会被初始化
	
	
换算关系
位等价于比特（bit），是同一个单位。
比特（是最小的单位）bit
1字（word）= 2字节（byte）
1字节（byte） = 8位（bit）

 
JVM参数详解：
 -XX:TargetSurvivorRatio=15 from区域的使用率(默认50%) 超过该使用率后，该区域内最小的age会成为晋升年龄
 -XX:MaxTenuringThreshold=15 晋升年龄，即新生代对象经过多少次GC后可以晋升到老年代
 -XX:+PrintGCDetails 打印详细GC日志
 -XX:+PrintHeapAtGC	打印GC前后的详细堆栈信息
 -XX:+UseTLAB 启用TLAB（默认就是启用） - 为不启用
 -XX:+PrintTLAB  打印TLAB日志
 -XX:+PrintGC 	打印GC
 -XX:TLABSize=102400  手动设置TLAB大小(字节)
 -XX:-ResizeTLAB 关闭自动调整TLAB
 -XX:TLABRefillWasteFraction=100  设置TLAB中允许浪费的空间 当对象大于这个值(即1/100的TLAB空间)时，会忽略TLAB直接存入堆中
 -XX:-DoEscapeAnalysis 关闭逃逸分析
 -server server模式启动
 -XX:+UseBiasedLocking 启用偏向锁
 -XX:BiasedLockingStartupDelay 虚拟机启动后，立即启动偏向锁
 -XX:+UseSpining 开启自旋锁(1.7以后失效)
 -XX:PreBlockSpin=50 设置自旋锁自旋次数(1.7以后失效)
 -XX:+TraceClassLoading 跟踪类初始化情况
 
 
 

 
class文件描述
u1，u2和u4，分别代表了1、2和4个字节的无符号数
ClassFile { 
    u4 magic; 
    u2 minor_version; 
    u2 major_version; 
    u2 constant_pool_count; 
    cp_info constant_pool[constant_pool_count-1]; 
    u2 access_flags; 
    u2 this_class; 
    u2 super_class; 
    u2 interfaces_count; 
    u2 interfaces[interfaces_count]; 
    u2 fields_count; 
    field_info fields[fields_count]; 
    u2 methods_count; 
    method_info methods[methods_count]; 
    u2 attributes_count; 
    attribute_info attributes[attributes_count]; 
}
